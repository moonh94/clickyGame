{"version":3,"sources":["components/Images/index.js","components/Navbar/NavBar.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Image","props","react_default","a","createElement","className","onClick","clickCount","id","alt","name","src","image","NavBar","score","highscore","Wrapper","children","App","state","images","gameOver","_this","setState","console","log","this","forEach","count","find","o","i","sort","Math","random","_this2","components_Wrapper","Navbar_NavBar","map","Images","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"i8DAUeA,eAPD,SAAAC,GAAK,OACfC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQC,QAAS,kBAAML,EAAMM,WAAWN,EAAMO,MAC7DN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACfH,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMS,KAAMC,IAAMV,EAAMW,mBCSvBC,SAXA,SAAAZ,GAAK,OACZC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,gBAEAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,UACQJ,EAAMa,MADd,eACiCb,EAAMc,oBCFpCC,MAJf,SAAiBf,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMgB,WC6E1BC,6MAxDbC,MAAM,CACJC,SACAN,MAAO,EACPC,UAAW,KAGbM,SAAW,WAUT,OATIC,EAAKH,MAAML,MAAQQ,EAAKH,MAAMJ,WAChCO,EAAKC,SAAS,CAACR,UAAWO,EAAKH,MAAML,OAAQ,WAC3CU,QAAQC,IAAIC,KAAKP,MAAMJ,aAG3BO,EAAKH,MAAMC,OAAOO,QAAQ,SAAAf,GACxBA,EAAMgB,MAAQ,IAEhBN,EAAKC,SAAS,CAACT,MAAO,KACf,KAGTP,WAAa,SAAAC,GACXc,EAAKH,MAAMC,OAAOS,KAAK,SAACC,EAAGC,GACzB,GAAID,EAAEtB,KAAOA,EAAI,CACf,GAAuB,IAApBY,EAAOW,GAAGH,MAMX,OALAR,EAAOW,GAAGH,MAAQR,EAAOW,GAAGH,MAAQ,EACpCN,EAAKC,SAAS,CAACT,MAAQQ,EAAKH,MAAML,MAAQ,GAAI,WAC5CU,QAAQC,IAAIC,KAAKP,MAAML,SAEzBQ,EAAKH,MAAMC,OAAOY,KAAK,kBAAMC,KAAKC,SAAW,MACtC,EAEPZ,EAAKD,uFAMJ,IAAAc,EAAAT,KACP,OACExB,EAAAC,EAAAC,cAACgC,EAAD,KACElC,EAAAC,EAAAC,cAACiC,EAAD,CAAQvB,MAAOY,KAAKP,MAAML,MAAOC,UAAWW,KAAKP,MAAMJ,WAAvD,eACAb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdqB,KAAKP,MAAMC,OAAOkB,IAAI,SAAAlB,GAAM,OAC3BlB,EAAAC,EAAAC,cAACmC,EAAD,CACEhC,WAAY4B,EAAK5B,WACjBC,GAAIY,EAAOZ,GACXgC,IAAKpB,EAAOZ,GACZI,MAAOQ,EAAOR,mBA/CR6B,aCZEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.54e50dc3.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst Image = props => (\n    <div className=\"image\" onClick={() => props.clickCount(props.id)}>\n    <div className=\"img-container\" >\n    <img alt={props.name} src ={props.image} />\n    </div></div>\n);\n\nexport default Image;","import React from \"react\";\nimport \"./style.css\";\n\n\nconst NavBar = props => (\n        <div className = \"navbar\" >\n            <div className=\"gameName\">Clicky Game!\n                </div>\n            <div className=\"score\">\n            Score: {props.score} Highscore: {props.highscore}\n            </div>\n        </div>\n\n)\n\nexport default NavBar;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React, {Component} from 'react';\nimport './App.css';\nimport Image from \"./components/Images/index.js\"\nimport images from \"./image.json\";\nimport NavBar from \"./components/Navbar/NavBar\";\nimport Wrapper from \"./components/Wrapper\";\n// import React from \"react\";\n// import \"./style.css\";\n\n// class Game extends React.Component {\n//     state = {\n//         count: 0\n//     };\n//  handleIncrement = () => {\n//     this.setState({ count: this.state.count +1})\n//     }\n\n//     render () {\n//         return (\n//         <ShowImage />\n// }\n\n// export default Game;\n\nclass App extends Component {\n  state={\n    images,\n    score: 0,\n    highscore: 0\n  };\n      \n  gameOver = () => {\n    if (this.state.score > this.state.highscore) {\n      this.setState({highscore: this.state.score}, function() {\n        console.log(this.state.highscore);\n      });\n    }\n    this.state.images.forEach(image => {\n      image.count = 0;\n    });\n    this.setState({score: 0});\n    return true;\n  }\n\n  clickCount = id => {\n    this.state.images.find((o, i) => {\n      if (o.id === id) {\n        if(images[i].count === 0){\n          images[i].count = images[i].count + 1;\n          this.setState({score : this.state.score + 1}, function(){\n            console.log(this.state.score);\n          });\n          this.state.images.sort(() => Math.random() - 0.5)\n          return true; \n        } else {\n          this.gameOver();\n        }\n      }\n    });\n  }\n  // Map over this.state.cards and render a cardCard component for each card object\n  render() {\n    return (\n      <Wrapper>\n        <NavBar score={this.state.score} highscore={this.state.highscore}>Clicky Game</NavBar>\n        <div className=\"row\">\n        {this.state.images.map(images => (\n          <Image\n            clickCount={this.clickCount}\n            id={images.id}\n            key={images.id}\n            image={images.image}\n          />\n        ))}\n        \n          </div>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}